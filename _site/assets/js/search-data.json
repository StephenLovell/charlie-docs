{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Add A New Post Type",
    "content": "Add A New Post Type . Set up a new post type’s content . In this example we will be creating a new post type: blog. . Create a folder with the name of your desired post type in the /content/ directory. | create the first blog post within that new folder. We’ll call ours hello-mars.md. | Make sure your file contains a Frontmatter block, even if it is empty, though it is recommended it at least have a title. | Lastly, begin drafting content after the Frontmatter block. You can use Markdown to format the text. | title: Hello Mars # {{title}} Welcome to the Hello Mars Post on my Blog! . Note: You have access to the local Frontmatter fields in a document. You can use the {{title}} Tag here to access the local title field, instead of writing the title out twice. . In our example we’d benefit from adding additional Frontmatter fields. . title: Hello Mars date: 02/02/2020 teaser: This would be a Teaser order: 0 . Set up a new post type’s template . You may be fine with the default post.ms template, but you may find yourself wanting blog Posts to look different in some way. This can be achieved by taking advantage of the Template Cascade. . Create a new template using the post-{type}.ms naming scheme. In this example we’ll call it post-blog.ms in the root of the active theme’s folder. . | You can copy over the contents of the post.ms file as a guide to build from, or create your own from scratch utilizing the Frontmatter fields, and the content field. . | {{&gt;header}} &lt;body&gt; &lt;h1&gt;{{title}}&lt;/h1&gt; &lt;span class=&quot;date&quot;&gt;{{date}}&lt;/span&gt; {{{content}}} &lt;/body&gt; . Now you have a custom Template that will only affect how blog posts are displayed. . Optional: Set up a new template for one specific blog post . Create a new folder in your active theme’s root, named the same as your post type. In this example blog. | Create a file with the same name as the specific blog post you want to make a template for. hello-mars.ms. | Copy over the contents of the post.ms file as a guide to build from, or create your own from scratch utilizing the Frontmatter fields, and the content field. | Only the Hello Mars blog post will have this template. All other blog posts will use the post-blog.ms template or if you opted to not set that up, then the post.ms template. Please see the Template Cascade to learn more about how this works. . Create a looper for our new post type . Loopers will let you display a dynamic list of items of your custom post type throughout your site. This is especially useful if you’d like to show a list of your latest blog posts on your /blog page. . There is a blog looper included by default. . However, to create a looper for a post type named something else you can just copy it and append it below with a comma. . &quot;loopers&quot; : { &quot;blog&quot; : { &quot;loop_type&quot; : &quot;default&quot;, &quot;content_filter&quot; : &quot;blog&quot;, &quot;sort_by&quot; : &quot;date&quot;, &quot;date_format&quot; : &quot;F j, Y&quot;, &quot;limit&quot; : 3, &quot;offset&quot; : 0 }, &quot;custom_post_type&quot; : { &quot;loop_type&quot; : &quot;default&quot;, &quot;content_filter&quot; : &quot;custom_post_type&quot;, &quot;sort_by&quot; : &quot;date&quot;, &quot;date_format&quot; : &quot;F j, Y&quot;, &quot;limit&quot; : 3, &quot;offset&quot; : 0 } } . Display a list of your blog posts on /blog . Add the following code to your themes/{theme_name}/pages/blog.ms file, if this file doesn’t exist you can create it. . {{#looper.blog}} {{#item}} &lt;article&gt; &lt;h2&gt;&lt;a href=&quot;{{{link}}}&quot;&gt;{{title}}&lt;/a&gt;&lt;/h2&gt; &lt;time class=&quot;article-date&quot;&gt;{{date}}&lt;/time&gt; &lt;p&gt;{{summary}}&lt;/p&gt; &lt;/article&gt; {{/item}} {{^item}} &lt;li&gt; &lt;article&gt; &lt;h3&gt;Nothing, Nada, Zip &amp;hellip;&lt;/h3&gt; &lt;/article&gt; &lt;/li&gt; {{/item}} {{/looper.blog}} . This will display the 3 most recent blog posts, sorted by date; as defined by the blog looper in the config.json file, and if there are none it will output: “Nothing, Nada, Zip”. .",
    "url": "http://localhost:4000/content/add-a-new-post-type/",
    "relUrl": "/content/add-a-new-post-type/"
  }
  ,"2": {
    "title": "App Structure",
    "content": "App Structure . By default Charlie comes with the following overall structure. . +-- .. |-- (Charlie) | |-- app (Charlie Core Files) | |-- content | |-- _blocks | |-- files | |-- imgs | |-- pages | | |-- 404.md | | |-- index.md | | +-- .. | +-- .. | |-- themes | |-- sample | | |-- _partials | | |-- pages | | | |-- 404.ms | | | |-- index.ms | | | +-- .. | | | | | |-- page.ms | | |-- post.ms | | +-- .. | +-- .. | |-- .htaccess |-- config.json |-- index.php +-- .. .",
    "url": "http://localhost:4000/app-structure/",
    "relUrl": "/app-structure/"
  }
  ,"3": {
    "title": "Configuration",
    "content": "Configuration . By default Charlie comes with a config.json file located in the root directory. This file contains three main sections that you can use to configure your site. . It is must be written in valid JSON, be sure to adhere to that. Be especially careful of trailing commas. . If you are fearful of writing raw json, you can instead use the Configurator Tool. . { &quot;globals&quot;: { &quot;site_domain&quot; : &quot;website.com&quot;, &quot;site_title&quot; : &quot;A Website, On Mars&quot;, &quot;site_description&quot; : &quot;a website that has stuff on it&quot;, &quot;site_author&quot; : &quot;A. Person&quot;, &quot;img_dir&quot; : &quot;/content/imgs&quot;, &quot;files_dir&quot; : &quot;/content/files&quot; }, &quot;settings&quot; : { &quot;theme&quot; : &quot;sample&quot;, &quot;archives&quot; : { &quot;blog&quot; : { &quot;enabled&quot; : true, &quot;limit&quot; : 10 } }, &quot;feeds&quot; : { &quot;blog&quot; : { &quot;enabled&quot; : true, &quot;limit&quot; : 50 } } }, &quot;loopers&quot; : { &quot;blog&quot; : { &quot;loop_type&quot; : &quot;default&quot;, &quot;content_filter&quot; : &quot;blog&quot;, &quot;sort_by&quot; : &quot;date&quot;, &quot;date_format&quot; : &quot;F j, Y&quot;, &quot;limit&quot; : 3, &quot;offset&quot; : 0 } } } . Globals . There are default Global Variables defined by Charlie that you can choose to overwrite here. . Name Value . site_domain | string | . site_title | string | . site_description | string | . site_author | string | . img_dir | path defined from site root | . files_dir | path defined from site root | . Settings . Name Value . theme | string containing name of active theme | . maintenance_mode | true/false | . Loopers . Loopers are small defined data sets that collect a grouping of content that you can output in your Template Files. . There is a blog loop included by default. . &quot;blog&quot; : { &quot;loop_type&quot; : &quot;default&quot;, &quot;content_filter&quot; : &quot;blog&quot;, &quot;sort_by&quot; : &quot;date&quot;, &quot;date_format&quot; : &quot;F j, Y&quot;, &quot;limit&quot; : 3, &quot;offset&quot; : 0 } . The blog attribute is the name of your looper. . And then you can define it with the following configuration options. . Name Value . loop_type | “default” or “feed” | . content_filter | post type name | . sort_by | Frontmatter field to sort by | . date_format | If this post type has a date, format it as defined | . limit | how many to include | . offset | start list offset by a number | . You can define as many loopers as you have need of. However, be careful. Loopers are available to all pages, which means they take up memory. . It’s also a good idea to keep your limit within reason. If you have 300 blog posts on your site, it would not be a good idea to create a looper that has a limit of 250. .",
    "url": "http://localhost:4000/configuration/",
    "relUrl": "/configuration/"
  }
  ,"4": {
    "title": "Content Structure",
    "content": "Content Structure . All content is stored within the /content/ folder, and structured as follows. . Home . content/pages/index.md . Pages . content/pages/{name}.md . examples: . content/pages/about.md content/pages/work.md content/pages/blog.md . Posts . content/{post_type}/{name}.md . examples: . content/work/moby-dick.md conten/blog/welcome-to-my-blog.md . Post Feeds . Valid RSS Atom 1.0, and JSONFeed are provided dynamically, and can be accessed by navigating to: . domain.com/{post_type}/feed/{format}/ . examples: . domain.com/blog/feed/rss/ domain.com/blog/feed/json/ . Post Archives . Paginated Archive listings are provided dynamically, and can be accessed by navigating to: . domain.com/{post_type}/pg/{num}/ domain.com/{post_type}/pg/{num}/ . examples: . domain.com/blog/pg/100/ domain.com/blog/pg/19/ . Note: Archives for blog Post Types are enabled by default. Any custom Post Types you create will need to be enabled in your config.json file. Please see configuration for more information. . Blocks . Blocks are useful when you need to have a small piece of content repeat across pages, but you don’t want to manually write out all the html within a .ms template file. This keeps your content within a .md file for easier access and formatting. . content/_blocks/{name}.md . examples: . content/_blocks/intro_blurb.md content/_blocks/sponsor_me_on_patreon_message.md .",
    "url": "http://localhost:4000/content-structure/",
    "relUrl": "/content-structure/"
  }
  ,"5": {
    "title": "Content",
    "content": "Content . this page is all about content .",
    "url": "http://localhost:4000/content/",
    "relUrl": "/content/"
  }
  ,"6": {
    "title": "Definitions",
    "content": "Definitions . Frontmatter . A area surrounded by , both before and after, at the beginning of a Markdown file. . Each line contains a named Field that can be given a value. These Fields can then be output within Templates and even within that Markdown file as Mustache Tags. . field: value content here... . Tag . A Tag, is a Mustache Tag that outputs some piece of data or series of data. They are wrapped in curly brackets, {{. . {{tag}} OR {{{tag}}} OR {{&gt;tag}} OR {{#tag}} {{/tag}} . Theme . A Theme is a collection of Templates and CSS Styles at a minimum. It may also include relevant images or scripts that help define an overall Design or Aesthetic for a site. As they are separate from the main content of a site you can swap one Theme out for another and get an entirely different look. .",
    "url": "http://localhost:4000/definitions/",
    "relUrl": "/definitions/"
  }
  ,"7": {
    "title": "Drafting Content",
    "content": "Drafting Content . Content is broken into three main types that load based on different criteria. . Pages | Posts | Blocks | . Pages &amp; Posts . Pages and Posts contain Frontmatter at the top of their files, which is essentially localized meta data and configuration options. . title: Hello Mars date: 02/02/2020 teaser: This would be a Teaser order: 2 summary: I could put a bunch of longer content here, and it would just keep on wrapping and going and doing whatever it needs to do so that I could get myself into a situation where this is at least one paragraph. . The Frontmatter block must be surrounded by two horizontal lines made of characters. . Frontmatter is followed by the page’s/post’s content written in Markdown format style. . title: Hello Mars date: 02/02/2020 teaser: This would be a Teaser order: 2 summary: I could put a bunch of longer content here, and it would just keep on wrapping and going and doing whatever it needs to do so that I could get myself into a situation where this is at least one paragraph. # Hello Mars This is a Blog post. . Frontmatter Core Fields . The following fields are a part of core in a multitude of ways, and gain advantages in formatting and display should you choose to use them. . Name format Available for . title | STRING | pages, posts | . date | 01/02/19 | posts | . teaser | STRING | posts | . summary | STRING | posts | . order | NUMBER | pages, posts | . Advantages of making your own Fields . By default Charlie expects you to put all your images, for everything, in /content/imgs/. However, this organization structure might not be desirable for you. . Let’s say that your site has two different kinds of Posts; blog and work. And you store images for both of these regularly, but you want to keep them separate. . You could make two folders called imgs at /content/blog/imgs/ and /content/work/imgs/, and then put relevant imgs in each spot. . Then, in the Frontmatter of each blog Post you add a new custom field entitled blog_img_dir field and set it as follows: . title: Blog Post Title Here blog_img_dir: /content/blog/imgs . and the same for each and work Post: . title: Work Post Title Here work_img_dir: /content/work/imgs . Then within blog Posts or work Posts when referencing the URL of an image to display instead of using {{img_dir}} you would use {{blog_img_dir}} or {{work_img_dir}} . for a blog Post . ... Look at this amazing image of a butterfly. ![Swallotail Butterfly]({{blog_img_dir}}/img.jpg) ... . for a work Post . ... Look at this amazing image of a butterfly. ![Swallotail Butterfly]({{work_img_dir}}/img.jpg) ... . This could become rather tedious, having to do this for every single blog or work Post that you create. Charlie provides a more global way to define a field. . If we know that we are going to use the same new folder for blog Posts, and the same new folder for work Posts, we could instead define this as a custom global in our config.json file. . { &quot;globals&quot;: { &quot;domain&quot; : &quot;website.com&quot;, &quot;site_title&quot; : &quot;A Website, On Mars&quot;, &quot;site_description&quot; : &quot;a website that has stuff on it&quot;, &quot;author&quot; : &quot;A. Person&quot;, &quot;blog_img_dir&quot; : &quot;/content/blog/imgs&quot;, &quot;work_img_dir&quot; : &quot;/content/work/imgs&quot; }, ... } . Keep in in mind once you set a field as global this way, it can still be overridden in a Frontmatter field in an individual file. . This means you should be careful. For example setting the site_title field in the Frontmatter of a page would change the Site’s Title for that page entirely. It’s best if you only overwrite a global field you’ve made yourself. Overriding the core globals could have unforeseen consequences. . Additionally Mustache Tags will not process inside of Frontmatter fields. Which means, the following is not currently possible: . title: custom_img_dir: {{blog_img_dir}}/custom/folder/ ... . Blocks . Blocks do not contain Frontmatter, as they are not full Pages or Posts, but are instead fragments. They can also be written in Markdown format. . # This is an intro statement There&#39;s really not much more than could be said than what is being said right now. . They have their uses, but also their limitations. It is strongly encouraged that you use them sparingly. . Pages and Posts will pull in dynamically, based on the URL you visit. Blocks, however must be manually called within a template file for inclusion by name, minus the file extension. . For example the following could be placed within the page.ms file in a chosen theme and will render the contents of the selected block entitled intro_blurb.md. . {{{block.intro_blurb}}} . Additionally, you can call a Block into a full Page or Post Markdown file. For example, placing the following in an index.md content file. . title: Home Page # Home Pages This is the homepage, with it&#39;s relevant content on it. {{{block.intro_blurb}}} Things pickup from here. . You cannot embed a Block within a Block. .",
    "url": "http://localhost:4000/content/drafting-content/",
    "relUrl": "/content/drafting-content/"
  }
  ,"8": {
    "title": "Feeds",
    "content": "Feeds . By default Charlie outputs valid Atom 1.0 RSS Feeds and JSON Feeds for all post types. . Please also see The Post Feeds section. . This can be disabled per post type in the config.json file. .",
    "url": "http://localhost:4000/feeds/",
    "relUrl": "/feeds/"
  }
  ,"9": {
    "title": "Getting Started",
    "content": "Getting Started . Installation . Login to your webhost using your SFTP client. | Place the entire contents of Charlie in the root directory of your webhost, ensuring the .htaccess file gets included. | Check file/directory permissions are set appropriately. Directories set as 750. Files set as 644. | Install With GitHub Pages . (forthcoming) . Install with Netlify . (forthcoming) . Next Steps . You can then proceed to configure charlie, draft your content, edit the existing templates, or build your own theme. .",
    "url": "http://localhost:4000/getting-started/",
    "relUrl": "/getting-started/"
  }
  ,"10": {
    "title": "Globals",
    "content": "Globals . There are a few variables available no matter what URL you visit and are defined as such. . Global Variables . Name Value Customizable? . current_year | the current year | X | . site_domain | string | Y | . site_title | string | Y | . site_description | string | Y | . site_author | string | Y | . img_dir | path defined from site root | Y | . files_dir | path defined from site root | Y | . Most Global Variables can be overridden within your config.json file. Please see configuration for more information. . Global Lambdas . Name Use as Tags . f_uppercase | {{#f_uppercase}} STRING {{/#f_uppercase}} | . f_lowercase | {{#f_lowercase}} STRING {{/#f_lowercase}} | . f_capitalize | {{#f_capitalize}} STRING {{/#f_capitalize}} | . f_markdown | {{#f_markdown}} STRING {{/#f_markdown}} | . f_date_FORMAT | {{#f_date_FORMAT}} 01/02/20|7:30PM {{/#f_date_FORMAT}} | . f_date_FORMAT Types . Examples shown are given 01/02/20|7:30PM as input. . Name Outputs as Example Output . f_date_RFC339 | &quot;Y-m-d TH:i:sP&quot; | 2020-01-02T19:30:00+00:00 | .",
    "url": "http://localhost:4000/globals/",
    "relUrl": "/globals/"
  }
  ,"11": {
    "title": "Guides",
    "content": "Guides . this page is all about guides .",
    "url": "http://localhost:4000/guides/",
    "relUrl": "/guides/"
  }
  ,"12": {
    "title": "Introduction",
    "content": ". A lightweight cms, built for creatives . Run your own site with less overhead and more control . No installation files, no database. . Download Charlie Get Started View it on GitHub . . Charlie was born out of the desire to have a site that didn’t need constant maintenance. It has less moving parts so there’s less to upkeep. All your content is stored within flat Markdown files, so it’s easier to backup or customize. . And because it’s so simple, it’ll run anywhere PHP will, which means affordable hosting is easily found. . Themes are designed to be approachable, but also empower creatives to have more ownership over how their own sites behave and look. There’s no need to know a programming language to take control of your theme. You just need to know or want to learn HTML &amp; CSS. . About the project . Charlie is © 2009-2020 Stephen Lovell . License . Charlie is released under an MIT license. . Contributing . (content here soon) .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"13": {
    "title": "Structure",
    "content": "Structure . this page is all about structure .",
    "url": "http://localhost:4000/structure/",
    "relUrl": "/structure/"
  }
  ,"14": {
    "title": "Template Cascade",
    "content": "The Template Cascade . Templates are loaded dynamically based on a cascade. The first file found is loaded. . At a minimum your theme must include a page.ms file in the theme root, as this is always the last stop in the cascade. . Home . domain.com/ --&gt; themes/{active-theme}/pages/index.ms -&gt; themes/{active-theme}/page.ms . Pages . domain.com/{request}/ --&gt; themes/{active-theme}/pages/{request}.ms -&gt; themes/{active-theme}/page.ms . Posts . domain.com/{post_type}/{request}/ --&gt; themes/{active-theme}/{post_type}/{request}.ms -&gt; themes/{active-theme}/post-{post-type}.ms &gt; themes/{active-theme}/post.ms --&gt; themes/{active-theme}/page.ms . Post Feeds . domain.com/{post_type}/feed/{format}/ --&gt; themes/{active-theme}/feed{format}-{post-type}.ms -&gt; themes/{active-theme}/feed{format}.ms -&gt; (built-in default template) . Post Archives . domain.com/{post_type}/pg/{num}/ --&gt; themes/{active-theme}/archive-{post-type}.ms -&gt; themes/{active-theme}/archive.ms -&gt; (built-in default template) . 404 . If no content can be found for a request, then the themes/{active-theme}/pages/404.ms is used. .",
    "url": "http://localhost:4000/templates/template-cascade/",
    "relUrl": "/templates/template-cascade/"
  }
  ,"15": {
    "title": "Templates",
    "content": "Templates . Templates end in a .ms extention. A Template can contain anything a valid .html file can, in addition to Mustache Tags. They are used to setup the display of a specific area of content across a given site. Their main use-case is in preventing repeat code for every individual URL found at a domain. . In this way, several URLs could share the same Template, and any updates to that Template will be reflected across all those URLs. .",
    "url": "http://localhost:4000/templates/",
    "relUrl": "/templates/"
  }
  ,"16": {
    "title": "Theme Structure",
    "content": "Theme Structure . All themes are stored within the /themes/ folder. . Each theme is stored in its own unique folder /themes/{theme_name}/ . The most basic theme must contain the following. . _partials/ page.ms . A simple theme may look like this. . css/style.css imgs/logo.svg js/scripts.js _partials/ page.ms . In this example the page.ms is a Template. It will be used as the Template for any url you visit at your site. . For example: . domain.com/ domain.com/about domain.com/contact . All three of these would use the page.ms Template since there are no other Templates within the example Theme. . To understand how Templates are loaded and overridden, please check out the Template Cascade. .",
    "url": "http://localhost:4000/theme-structure/",
    "relUrl": "/theme-structure/"
  }
  ,"17": {
    "title": "Using Templates",
    "content": "Using Templates . Templates can be simple HTML. . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;Site Title Here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;heading here&lt;/h1&gt; &lt;p&gt;a paragraph here&lt;/p&gt; &lt;/body&gt; . But are most powerful when you use the built in Mustache Tags to dynamically load things. . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;{{#title}} {{title}} | {{/title}}{{site_title}}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;{{title}}&lt;/h1&gt; {{{content}}} &lt;/body&gt; . In this example the {{#title}} {{title}} | {{/title}} portion uses Mustache’s false check to determine if the current URL has a title defined in its Content File’s Frontmatter. If so then it will output the value of the title. . title: About Page # About Page About content here. . The site title is then output from the Globally defined site_title in the config.json file. . { &quot;globals&quot;: { &quot;domain&quot; : &quot;website.com&quot;, &quot;site_title&quot; : &quot;A Website, On Mars&quot;, &quot;site_description&quot; : &quot;a website that has stuff on it&quot;, &quot;author&quot; : &quot;A. Person&quot; }, } . Further down in the body the title is output as a heading for the page. And the page’s content pulled from its Content File’s content area is output. . Please note that the content has three {{{}}} around it, because it is not just outputting raw text but instead formatted html. This is a convention of Mustache’s syntax. If you forget the extra bracket it will not render correctly. . Rendering fully, the final output from the above snippets would look like this. . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;About Page | A Website, On Mars&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;About Page&lt;/h1&gt; &lt;p&gt;About content here.&lt;/p&gt; &lt;/body&gt; . This enables you to define a value one time and reuse it elsewhere, or to pull in a dynamic value that may change from URL to URL. In this instance, if you navigated away to another page then the title and content values would output different information automatically. . Page Templates . They are dynamically loaded for Home, and first-level URLs. . domain.com/ domain.com/about domain.com/contact domain.com/work domain.com/blog . The General Page Template can be found at /themes/{active-theme}/page.ms . Specific Page Templates can be found at /themes/{active-theme}/pages/page-title-here.ms . To understand how Templates are loaded and overridden, please check out the Template Cascade. . Post Templates . They are dynamically loaded for second-level URLs, and nest under their respective content type parent. . domain.com/blog/hello-mars/ domain.com/blog/goodbye-pluto/ domain.com/work/moby-dick/ domain.com/work/gallery-show-seven/ . The General Post Template can be found at /themes/{active-theme}/post.ms . Specific Post Type Templates can be found at /themes/{active-theme}/post-{post-type}.ms . Specific Post Templates can be found at /themes/{active-theme}/{post-type}/{specific-post-title-here}.ms . To understand how Templates are loaded and overridden, please check out the Template Cascade. . Post Feed Templates . They are dynamically loaded for a valid Post Type, followed by feed in the second-level, and a valid Format in the third-level . domain.com/blog/feed/rss/ domain.com/blog/feed/json/ domain.com/writing/feed/rss/ domain.com/writing/feed/json/ . All Feeds come in two formats: Atom 1.0 RSS &amp; JSON Feed. . By default the Post Type blog is enabled to have a Feed. Any other Post Types you create must have their respective Feeds enabled through your config.json file. See Configuration for more details. . The General Feed Template can be found at /themes/{active-theme}/feed.ms . Specific Feed by Post Type Templates can be found at /themes/{active-theme}/feed{format}-{post-type}.ms . If you do not include a Feed Template of any kind in your theme, the format specific one baked into Charlie will be used. . The RSS version contains the following code to model from: . &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt; &lt;title&gt;{{author}}&#39;s {{post.type}} Feed&lt;/title&gt; &lt;subtitle&gt;{{site_description}}&lt;/subtitle&gt; &lt;link href=&quot;http://{{domain}}/feed/&quot; hreflang=&quot;en&quot; rel=&quot;self&quot; type=&quot;application/atom+xml&quot;/&gt; &lt;link href=&quot;http://{{domain}}/&quot; hreflang=&quot;en&quot; rel=&quot;alternate&quot; type=&quot;text/html&quot;/&gt; &lt;updated&gt;2012-07-15T10:50:43+10:00&lt;/updated&gt; &lt;generator uri=&quot;http://charliecms.com/&quot; version=&quot;1.0&quot;&gt;Charlie&lt;/generator&gt; &lt;author&gt; &lt;name&gt;{{author}}&lt;/name&gt; &lt;uri&gt;http://{{domain}}&lt;/uri&gt; &lt;/author&gt; &lt;id&gt;tag:{{domain}},2012:/feed/&lt;/id&gt; &lt;rights&gt; {{current_year}} {{author}}&lt;/rights&gt; {{#post.feed}} {{#item}} &lt;entry&gt; &lt;title&gt;{{title}}&lt;/title&gt; &lt;id&gt;{{id}}&lt;/id&gt; &lt;updated&gt;{{date}}&lt;/updated&gt; &lt;link rel=&quot;alternate&quot; type=&quot;text/html&quot; href=&quot;{{link}}&quot; /&gt; &lt;content type=&quot;xhtml&quot; xml:lang=&quot;en&quot;&gt; &lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;summary&gt;{{summary}}&lt;/summary&gt; &lt;/div&gt; &lt;/content&gt; &lt;/entry&gt; {{/item}} {{/post.feed}} &lt;/feed&gt; . The JSON version contains the following code to model from: . { &quot;version&quot;: &quot;https://jsonfeed.org/version/1&quot;, &quot;user_comment&quot;: &quot;This feed allows you to read the posts from this site in any feed reader that supports the JSON Feed format. To add this feed to your reader, copy the following URL â€” https://jsonfeed.org/feed.json â€” and add it your reader.&quot;, &quot;title&quot;: &quot;JSON Feed&quot;, &quot;description&quot;: &quot;{{site_description}}&quot;, &quot;home_page_url&quot;: &quot;{{domain}}&quot;, &quot;feed_url&quot;: &quot;https://jsonfeed.org/feed.json&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;{{author}}&quot;, &quot;url&quot;: &quot;{{domain}}&quot; }, &quot;items&quot;: [ {{#post.feed}} {{#item}} { &quot;title&quot;: &quot;{{title}}&quot;, &quot;date_published&quot;: &quot;2017-05-17T08:02:12-07:00&quot;, &quot;id&quot;: &quot;https://jsonfeed.org/2017/05/17/announcing_json_feed&quot;, &quot;url&quot;: &quot;{{link}}&quot;, &quot;content_html&quot;: &quot;{{content}}&quot; } {{/item}} ] {{/post.feed}} } . To understand how Templates are loaded and overridden, please check out the Template Cascade. . Post Archive Templates . They are dynamically loaded for a valid Post Type, followed by pg in the second-level, and a number in the third-level . domain.com/blog/pg/100/ domain.com/writing/pg/19/ . By default the Post Type blog is enabled to have an Archive. Any other Post Types you create must have their respective Archives enabled through your config.json file. See Configuration for more details. . The General Archive Template can be found at /themes/{active-theme}/archive.ms . Specific Archive by Post Type Templates can be found at /themes/{active-theme}/archive-{post-type}.ms . If you do not include an Archive Template of any kind in your theme, the one baked into Charlie will be used. It contains the following code to model from: . {{&gt;header}} &lt;body&gt; &lt;h1&gt;{{post.type}} Archive&lt;/h1&gt; {{#post.archive}} {{#item}} &lt;article&gt; &lt;h2&gt;&lt;a href=&quot;{{{link}}}&quot;&gt;{{title}}&lt;/a&gt;&lt;/h2&gt; &lt;time class=&quot;article-date&quot;&gt;{{date}}&lt;/time&gt; &lt;p&gt;{{summary}}&lt;/p&gt; &lt;/article&gt; {{/item}} {{#post.pagination}} &lt;nav&gt; &lt;ul&gt; {{#item}} &lt;li&gt;{{#link}}&lt;a href=&quot;{{link}}&quot;&gt;{{/link}}{{num}}{{#link}}&lt;/a&gt;{{/link}}&lt;/li&gt; {{/item}} &lt;/ul&gt; &lt;/nav&gt; {{/post.pagination}} {{/post.archive}} {{&gt;footer}} . To understand how Templates are loaded and overridden, please check out the Template Cascade. . Partials Templates . Partials Templates can be found at /themes/{active-theme}/_partials/ . They are then included in other templates with the following Tag convention: . {{&gt;partial_name_here}} . They can be especially useful for repeating HEADER or FOOTER element areas across pages. If every page includes the same header, with the same logo, and the same menu it can be a good idea to put that into a Partial, and then include it in all your templates so you don’t repeat yourself unnecessarily. . Localized Variables . There are a few Variables available on a given Page or Post that can be called via Mustache Tags without having to first be defined in a Frontmatter block. They are usually generated dynamically under the hood. . Name Tag . content | {{{content}}} | . link | {{{link}}} | . Calling Variables . {{title}} {{date}} {{{content}}} . Calling Partials . {{&gt;header}} {{&gt;footer} . Calling Blocks . {{block.intro_blurb}} {{block.sponsor_me_on_patreon_message}} . Calling Loopers . {{#looper.blog}} {{#item}} &lt;article&gt; &lt;h2&gt;&lt;a href=&quot;{{{link}}}&quot;&gt;{{title}}&lt;/a&gt;&lt;/h2&gt; &lt;time class=&quot;article-date&quot;&gt;{{date}}&lt;/time&gt; &lt;p&gt;{{summary}}&lt;/p&gt; &lt;/article&gt; {{/item}} {{^item}} &lt;li&gt; &lt;article&gt; &lt;h3&gt;Nothing, Nada, Zip &amp;hellip;&lt;/h3&gt; &lt;/article&gt; &lt;/li&gt; {{/item}} {{/looper.blog}} . Calling Lambdas . {{#f_markdown}} # A Title Written In markdown Content here is drafted in **Markdown**, but will output as rendered HTML thanks to this formating lambda block. {{/f_markdown}} .",
    "url": "http://localhost:4000/templates/using-templates/",
    "relUrl": "/templates/using-templates/"
  }
  
}